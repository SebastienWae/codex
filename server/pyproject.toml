[tool.poetry]
name = "codex"
version = "0.0.0"
description = ""
authors = ["Sebastien Waegeneire <sebastien@waegeneire.com>"]
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.4"
mypy = "^1.10.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"

[tool.mypy]
strict = true
python_version = "3.12"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "F",     # Pyflakes 
  "E",     # pycodestyle - Error
  "W",     # pycodestyle - Warning
  "C90",   # mccabe
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "TRIO",  # flake8-trio
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  "CPY",   # flake8-copyright
  "C4",    # flake8-comprehensions
  "DTZ",   # flake8-datetimez
  "T10",   # flake8-debugger
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "LOG",   # flake8-logging
  "G",     # flake8-logging-format
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TCH",   # flake8-type-checking
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "PTH",   # flake8-use-pathlib
  "TD",    # flake8-todos
  "FIX",   # flake8-fixme
  "ERA",   # eradicate
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PLC",   # Pylint - Convention
  "PLE",   # Pylint - Error
  "PLR",   # Pylint - Refactor
  "PLW",   # Pylint - Warning
  "TRY",   # tryceratops
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "PERF",  # Perflint
  "FURB",  # refurb
  "RUF",   # Ruff-specific rules

]
ignore = [
  "D1", # disable	undocumented warnings
  # disable rules that conflict with ruff formatting
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]

[tool.ruff.lint.isort]
# the folliwing rules should not be changed:
# force-single-line
# force-wrap-aliases
# lines-after-imports
# lines-between-types
# split-on-trailing-comma 


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
